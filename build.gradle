buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

group = "com.github.stabilaprotocol"
ext.githubProjectName = "chainbase"

version = project.properties["release.version"]

description = "chainbase â€“ a decentralized database for blockchain."

apply plugin: "java-library"
//apply plugin: "checkstyle"
apply plugin: "jacoco"
apply plugin: "maven"
apply plugin: "maven-publish"
//apply plugin: "me.champeau.gradle.jmh"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// Dependency versions
// ---------------------------------------

def junitVersion = "4.12"
def mockitoVersion = "2.1.0"
def jmhLibVersion = "1.20"
def testNgVersion = "6.11"
def guavaVersion = "24.1-jre"
def jacocoVersion = "0.8.0"
def leveldbVersion = "1.8"
def logbackVersion = "1.2.3"
def jansiVersion = "1.16"
def lombokVersion = "1.18.2"
def slf4jVersion = "1.7.25"
// --------------------------------------

repositories {
    mavenCentral()
}

dependencies {
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    testImplementation "org.testng:testng:$testNgVersion"

    compile "com.google.guava:guava:$guavaVersion"
    compile "org.fusesource.leveldbjni:leveldbjni-all:$leveldbVersion"
    compile "org.fusesource.jansi:jansi:$jansiVersion"
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "org.projectlombok:lombok:$lombokVersion"
}

//javadoc {
//    failOnError = false
//    exclude "**/test/**"
//    options {
//        windowTitle = "Chainbase Javadoc ${project.version}"
//    }
//    // Clear the following options to make the docs consistent with the old format
//    options.addStringOption("top").value = ""
//    options.addStringOption("doctitle").value = ""
//    options.addStringOption("header").value = ""
//    options.stylesheetFile = new File(projectDir, "gradle/stylesheet.css");
//
//    options.links(
//            "https://docs.oracle.com/javase/7/docs/api/"
//    )
//
//    if (JavaVersion.current().isJava7()) {
//        // "./gradle/stylesheet.css" only supports Java 7
//        options.addStringOption("stylesheetfile", rootProject.file("./gradle/stylesheet.css").toString())
//    }
//}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = "javadoc"
//    from javadoc.destinationDir
//}

artifacts {
    archives jar
    archives sourcesJar
//    archives javadocJar
}


//jmh {
//    jmhVersion = jmhLibVersion
//    humanOutputFile = null
//    includeTests = false
//    jvmArgs = ["-Djmh.ignoreLock=true"]
//    jvmArgsAppend = ["-Djmh.separateClasspathJAR=true"]
//
//    if (project.hasProperty("jmh")) {
//        include = ".*" + project.jmh + ".*"
//        println("JMH: " + include);
//    }
//
//}

//plugins.withType(EclipsePlugin) {
//    project.eclipse.classpath.plusConfigurations += [ configurations.jmh ]
//}

test {

    testLogging  {
        // showing skipped occasionally should prevent CI timeout due to lack of standard output
        events=["skipped", "failed"] // "started", "passed"
        // showStandardStreams = true
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"

        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
    }

    maxHeapSize = "1200m"

    if (System.getenv("CI") == null) {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}

task testng(type: Test) {
    useTestNG()
    testLogging  {
        events=["skipped", "failed"]
        exceptionFormat="full"

        debug.events = ["skipped", "failed"]
        debug.exceptionFormat="full"

        info.events = ["failed", "skipped"]
        info.exceptionFormat="full"

        warn.events = ["failed", "skipped"]
        warn.exceptionFormat="full"
    }
}

check.dependsOn testng

jacoco {
    toolVersion = jacocoVersion // See http://www.eclemma.org/jacoco/.
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["io/reactivex/tck/**"])
        })
    }
}

build.dependsOn jacocoTestReport

//checkstyle {
//    configFile file("checkstyle.xml")
//    ignoreFailures = true
//    toolVersion ="6.19"
//}

//apply from: file("gradle/javadoc_cleanup.gradle")
